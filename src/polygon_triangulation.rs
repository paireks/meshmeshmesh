use crate::mesh::Mesh;
use crate::polygon::Polygon;

impl Polygon {
    /// Triangulates the [Polygon] using raw method introduced by iTriangle library.
    ///
    /// # Example
    ///
    /// ```
    /// use meshmeshmesh::local_coordinate_system::LocalCoordinateSystem;
    /// use meshmeshmesh::mesh::Mesh;
    /// use meshmeshmesh::point::Point;
    /// use meshmeshmesh::polygon::Polygon;
    /// use meshmeshmesh::vector::Vector;
    ///
    /// let input_points = vec![
    ///     Point::new(-15.519542, 33.6924, 54.752506),
    ///     Point::new(-6.776692, 72.957549, 102.8696),
    ///     Point::new(38.186615, 79.290175, 45.436313),
    ///     Point::new(20.315263, 45.368737, 19.312824),
    ///     Point::new(4.753062, 55.839337, 58.928299),
    /// ];
    ///
    /// let input = Polygon::new(input_points);
    ///
    /// let actual = input.triangulate_raw();
    /// let expected = Mesh::new(
    /// vec![20.315263073219796,45.368736910106094,19.31282409741451,-15.519541989587127,33.6923999962421,54.752505978555725,4.753061984918318, 55.839336994745345,58.92829901438469,38.18661511178051,79.29017488240531,45.43631310822596,-6.77669199116391,72.95754898916059,102.86959996987775],
    /// vec![3,0,2,4,3,2,4,2,1]
    /// );
    ///
    /// assert_eq!(expected, actual);
    /// ```
    pub fn triangulate_raw(&self) -> Mesh {
        let local_coordinate_system = self.get_local_coordinate_system();
        let polygon_2d = self.to_polygon2d(&local_coordinate_system);
        let mesh_2d = polygon_2d.triangulate_raw();
        mesh_2d.get_in_local_coordinate_system(&local_coordinate_system)
    }

    /// Triangulates the [Polygon] using raw method introduced by iTriangle library.
    ///
    /// It also allows to define the holes.
    ///
    /// # Example
    ///
    /// ```
    /// use meshmeshmesh::local_coordinate_system::LocalCoordinateSystem;
    /// use meshmeshmesh::mesh::Mesh;
    /// use meshmeshmesh::point::Point;
    /// use meshmeshmesh::polygon::Polygon;
    /// use meshmeshmesh::vector::Vector;
    ///
    /// let input_points = vec![
    ///     Point::new(-15.519542, 33.6924, 54.752506),
    ///     Point::new(-6.776692, 72.957549, 102.8696),
    ///     Point::new(38.186615, 79.290175, 45.436313),
    ///     Point::new(20.315263, 45.368737, 19.312824),
    ///     Point::new(4.753062, 55.839337, 58.928299),
    /// ];
    ///
    /// let input = Polygon::new(input_points);
    ///
    /// let hole1 = Polygon::new(vec![
    ///     Point::new(-2.924185, 62.225129, 80.373895),
    ///     Point::new(20.185889, 71.417946, 60.110316),
    ///     Point::new(-8.776735, 48.74057, 68.11553),
    /// ]);
    ///
    /// let hole2 = Polygon::new(vec![
    ///     Point::new(13.477064, 54.448289, 43.701334),
    ///     Point::new(11.676458, 62.943122, 59.637808),
    ///     Point::new(22.774106, 72.530136, 57.969704),
    ///     Point::new(14.188262, 62.46664, 55.135255),
    /// ]);
    ///
    /// let actual = input.triangulate_raw_with_holes(vec![hole1, hole2]);
    /// let expected = Mesh::new(
    ///     vec![20.315263073219796,45.368736910106094,19.31282409741451,-15.519541989587127,33.6923999962421,54.752505978555725,13.47706429545419,54.44828873947391,43.70133418810492,4.753061984918318,55.839336994745345,58.92829901438469,-8.77673518069329,48.74057015539112, 68.11552990722693,14.188262225723733, 62.46663978597737,55.13525516632474, 11.676457660496215,62.943122312782386, 59.63780778399595,38.18661511178051,79.29017488240531,45.43631310822596, 22.774106108979495,72.53013587908147, 57.96970408308002,20.18588893088867, 71.41794609990754,60.11031592295312, -2.924185173340555,62.22512918203788, 80.37389489322362,-6.77669199116391,72.95754898916059, 102.86959996987775],
    ///     vec![3, 2, 0, 4, 3, 1, 5, 0, 2, 6, 2, 3, 6, 3, 4, 7, 0, 5, 8, 6, 4, 8, 7, 5, 9, 8, 4, 9, 7, 8, 10, 4, 1, 10, 7, 9, 11, 7, 10, 11, 10, 1]
    /// );
    ///
    /// assert_eq!(expected, actual);
    /// ```
    pub fn triangulate_raw_with_holes(&self, holes: Vec<Polygon>) -> Mesh {
        let local_coordinate_system = self.get_local_coordinate_system();
        let polygon_2d = self.to_polygon2d(&local_coordinate_system);
        let mut holes_2d = Vec::with_capacity(holes.len());
        for hole in holes {
            holes_2d.push(hole.to_polygon2d(&local_coordinate_system));
        }
        let mesh_2d = polygon_2d.triangulate_raw_with_holes(holes_2d);
        mesh_2d.get_in_local_coordinate_system(&local_coordinate_system)
    }
}

#[cfg(test)]
mod tests {
    use crate::point::Point;
    use super::*;

    #[test]
    fn test_triangulate_raw() {
        let input_points = vec![
            Point::new(-15.519542, 33.6924, 54.752506),
            Point::new(-6.776692, 72.957549, 102.8696),
            Point::new(38.186615, 79.290175, 45.436313),
            Point::new(20.315263, 45.368737, 19.312824),
            Point::new(4.753062, 55.839337, 58.928299),
        ];
        
        let input = Polygon::new(input_points);
        
        let actual = input.triangulate_raw();
        let expected = Mesh::new(
            vec![20.315263073219796,45.368736910106094,19.31282409741451,-15.519541989587127,33.6923999962421,54.752505978555725,4.753061984918318, 55.839336994745345,58.92829901438469,38.18661511178051,79.29017488240531,45.43631310822596,-6.77669199116391,72.95754898916059,102.86959996987775],
            vec![3,0,2,4,3,2,4,2,1]
        );
        
        assert_eq!(expected, actual);
    }

    #[test]
    fn test_triangulate_raw_with_holes() {
        let input_points = vec![
            Point::new(-15.519542, 33.6924, 54.752506),
            Point::new(-6.776692, 72.957549, 102.8696),
            Point::new(38.186615, 79.290175, 45.436313),
            Point::new(20.315263, 45.368737, 19.312824),
            Point::new(4.753062, 55.839337, 58.928299),
        ];

        let input = Polygon::new(input_points);

        let hole1 = Polygon::new(vec![
            Point::new(-2.924185, 62.225129, 80.373895),
            Point::new(20.185889, 71.417946, 60.110316),
            Point::new(-8.776735, 48.74057, 68.11553),
        ]);

        let hole2 = Polygon::new(vec![
            Point::new(13.477064, 54.448289, 43.701334),
            Point::new(11.676458, 62.943122, 59.637808),
            Point::new(22.774106, 72.530136, 57.969704),
            Point::new(14.188262, 62.46664, 55.135255),
        ]);

        let actual = input.triangulate_raw_with_holes(vec![hole1, hole2]);
        let expected = Mesh::new(
        vec![20.315263073219796,45.368736910106094,19.31282409741451,-15.519541989587127,33.6923999962421,54.752505978555725,13.47706429545419,54.44828873947391,43.70133418810492,4.753061984918318,55.839336994745345,58.92829901438469,-8.77673518069329,48.74057015539112, 68.11552990722693,14.188262225723733, 62.46663978597737,55.13525516632474, 11.676457660496215,62.943122312782386, 59.63780778399595,38.18661511178051,79.29017488240531,45.43631310822596, 22.774106108979495,72.53013587908147, 57.96970408308002,20.18588893088867, 71.41794609990754,60.11031592295312, -2.924185173340555,62.22512918203788, 80.37389489322362,-6.77669199116391,72.95754898916059, 102.86959996987775],
        vec![3, 2, 0, 4, 3, 1, 5, 0, 2, 6, 2, 3, 6, 3, 4, 7, 0, 5, 8, 6, 4, 8, 7, 5, 9, 8, 4, 9, 7, 8, 10, 4, 1, 10, 7, 9, 11, 7, 10, 11, 10, 1]
        );

        assert_eq!(expected, actual);
    }

    #[test]
    fn test_triangulate_raw_with_holes_2() {
        let input_points = vec![
            Point::new(6.099039, 31.332988, 18.714621),
            Point::new(-3.444029, 31.189222, 32.775252),
            Point::new(9.416604, 39.219719, 26.041992),
            Point::new(6.177459, 35.346838, 24.85377),
            Point::new(9.244267, 34.988629, 19.704806),
            Point::new(13.6584, 45.198902, 29.012548),
            Point::new(-15.495013, 26.096085, 42.87511),
            Point::new(-26.440577, 5.675073, 27.428251),
            Point::new(-40.71311, 2.895303, 44.459438),
            Point::new(-27.147631, 24.053549, 57.133809),
            Point::new(-48.932654, 26.891492, 94.166737),
            Point::new(-23.434834, 43.500205, 81.88844),
            Point::new(18.869641, 92.383834, 94.760848),
            Point::new(4.121425, 66.786501, 76.937514),
            Point::new(-30.634022, 34.29986, 78.323773),
            Point::new(-19.925196, 27.558979, 51.786808),
            Point::new(31.399994, 103.908653, 93.9687),
            Point::new(14.40643, 94.196159, 104.266627),
            Point::new(-13.202418, 60.56833, 93.176552),
            Point::new(14.629325, 101.524995, 115.356701),
            Point::new(60.390298, 132.002419, 94.364774),
            Point::new(78.034641, 129.380784, 63.867068),
            Point::new(46.44343, 119.117307, 95.156922),
            Point::new(39.122463, 108.783618, 90.007959),
            Point::new(78.652391, 117.396088, 44.261401),
            Point::new(89.947796, 145.013743, 70.402291),
            Point::new(101.383613, 161.458808, 78.917884),
            Point::new(110.74198, 152.658769, 51.192697),
            Point::new(101.001848, 138.858485, 44.261401),
            Point::new(77.561542, 105.930452, 28.022363),
            Point::new(39.341295, 101.624877, 78.52181),
            Point::new(30.063554, 82.932541, 63.272957),
            Point::new(51.36349, 82.805009, 31.190955),
            Point::new(66.900314, 85.528391, 12.179399),
            Point::new(32.581979, 46.600826, 2.871657),
            Point::new(-17.737602, 2.598143, 9.604917),
            Point::new(-9.036283, 23.150882, 28.616474),
        ];

        let input = Polygon::new(input_points);

        let hole1 = Polygon::new(vec![
            Point::new(-25.865299, 15.086035, 41.23634),
            Point::new(17.076158, 75.578677, 71.250657),
            Point::new(9.490554, 54.540184, 49.811859),
        ]);

        let hole2 = Polygon::new(vec![
            Point::new(90.185935, 131.823451, 49.485645),
            Point::new(99.555011, 151.365796, 65.922721),
            Point::new(103.992943, 148.004597, 54.040498),
            Point::new(85.208297, 120.309739, 38.989682),
        ]);

        let actual = input.triangulate_raw_with_holes(vec![hole1, hole2]);
        let expected = Mesh::new(
            vec![66.90031351005017, 85.52839148991879, 12.17939868862376, 101.00184885338923, 138.85848415634356, 44.26140151118835, 77.56154182897815, 105.9304522445717, 28.02236295516086, 110.74198110624161, 152.6587677678508, 51.19269784796992, 85.20829754939568, 120.30973849551319, 38.98968238409893, 32.58197831475028, 46.600826612558066, 2.871656601317281, 103.99294376712439, 148.00459609926617, 54.040498443740375, 90.18593611086105, 131.82344969177242, 49.48564576206026, 78.65239195045498, 117.396087050576, 44.261401704938876, 51.36349043311412, 82.8050087544695, 31.190955179609055, 99.55501254677569, 151.3657943850803, 65.92272189768123, 89.9477973909075, 145.0137415188049, 70.40229205826779, 101.38361485085204, 161.45880622579688, 78.91788521065598, 78.03464258709471, 129.3807825349311, 63.86706895050655, 9.24426704253897, 34.98862916984903, 19.704805909109766, 6.099039006933422, 31.332988047675123, 18.71462106393451, 9.416604129720797, 39.21971883718841, 26.041991963029798, 13.658399685720816, 45.19890223572289, 29.01254787869834, 6.17745881480745, 35.346838210543766, 24.85376994371339, -17.737602778254534, 2.598143665912808, 9.604916488393174, -9.036282983496765, 23.150881973423722, 28.61647393387142, -3.444029018545485, 31.189222047291285, 32.7752521014748, 30.063555516182454, 82.93253955923123, 63.272957890776055, 9.49055435550705, 54.54018354507004, 49.811859266870755, -26.44057691909094, 5.675073007834236, 27.42825092803183, 39.341296683921186, 101.624875132505, 78.52181108870991, 60.3903006149223, 132.00241633558156, 94.36477562341113, -15.495004502288005, 26.096076217765457, 42.8751155700371, -25.865298643809183, 15.086034730968873, 41.236340209170294, 17.076159379076277, 75.57867571191595, 71.25065781992645, 39.122465224586776, 108.78361580619631, 90.00796053512144, 46.44343250306444, 119.11730440223762, 95.15692360428216, -19.92519502973155, 27.558977878890232, 51.78680877822918, 31.39999645794502, 103.90865054290616, 93.96870167880705, -40.71311002760493, 2.8953030962314408, 44.45943802068628, 4.121426565808953, 66.78649918738247, 76.93751516108384, -27.147630261465533, 24.05354808740215, 57.13380949486237, 18.869643458615695, 92.3838315720374, 94.76084958384723, 14.406432485506958, 94.19615647217054, 104.26662868920533, -23.43483275281975, 43.500203537090115, 81.88844088222625, -30.6340207315344, 34.299858576095176, 78.32377375006067, -13.202416105236956, 60.56832803265344, 93.17655337965951, 14.629328174632903, 101.52499182748083, 115.35670310410512, -48.93265178511998, 26.89148966909506, 94.16673846327721],
            vec![3, 2, 1, 4, 2, 3, 6, 4, 3, 7, 2, 4, 8, 2, 7, 9, 5, 0, 10, 6, 3, 10, 8, 7, 11, 8, 10, 12, 11, 10, 12, 10, 3, 14, 5, 9, 15, 5, 14, 17, 14, 9, 18, 15, 14, 19, 5, 15, 20, 19, 15, 21, 15, 18, 21, 18, 16, 22, 17, 9, 23, 17, 22, 25, 2, 8, 25, 23, 22, 27, 17, 23, 28, 27, 23, 28, 24, 27, 29, 23, 25, 30, 25, 8, 30, 29, 25, 30, 28, 29, 31, 13, 26, 32, 28, 30, 32, 30, 31, 33, 32, 31, 34, 24, 28, 34, 28, 32, 36, 34, 32, 38, 33, 31, 38, 31, 26, 39, 35, 37, 40, 35, 39, 40, 36, 32, 42, 41, 38, 42, 38, 26, 43, 36, 40, 43, 40, 39]
        );

        assert_eq!(expected, actual);
    }
}